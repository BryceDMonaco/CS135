/*
	Bryce Monaco
	CS135-1201
	
	Array Formatting (Assignment 2)
	
	Compile with: gcc array_formatting.c -o format -std=c99
*/

#include <stdio.h>

	//Initialize and assign values that allow the while loop to run at least once
	//Woo globals
	int colAmount = -1, rowAmount = -1;
	int storageArray[500] = {0}; //This is needed to store any input
	int largestValue = 0, largestDigitCount = 1;
	
//Function Declarations
int read_row (int rowNum, int colNum);
int check_input (int checkInt);
int format_row (int newLineAmt, int elementSpan, char justification, char betweenChar);
int check_format (int requestedSize);

int main (void) {
	
	//Fill storageArray with placeholder values
	for (int i = 0; i < 500; i++) {
		storageArray[i] = 9999;
	
	}
	
	
	printf("This program counts occurrences of digits 0 through 9 in an NxM array\n");
	printf("Enter the size of your array (\"N M\"): ");
	
	//Keep waiting for values that fufill the conditions
	while (!(colAmount >= 0) && !(rowAmount >= 0)) {
		scanf("%d %d", &rowAmount, &colAmount);
		
		if ((colAmount >= 0) && (rowAmount >= 0)) {
			printf("Making an array with %d rows and %d columns.\n", rowAmount, colAmount);
		
		} else {
			printf("Invalid array size. Ensure both values are >= 0 and are integers.\n");
			printf("Enter the size of your array (\"N M\"): ");
			
		}
	}
	
	//Create the array and fill it with zeroes
	int digitArray[rowAmount][colAmount];
	
	//Fill the array with placeholder values
	for (int i = 0; i < (rowAmount); i++) {
		for (int ii = 0; ii < (colAmount); ii++) {
			digitArray[i][ii] = 9999; //9999 is a placeholder
		
		}
	}
	
	//Loop to call read_row
		//
	for (int i = 0; i < (rowAmount); i++) { //Run once for every row
		for (int ii = 0; ii < (colAmount); ii++) { //Run once for every column in a row
			//Assign the array value to the next read value
			digitArray[i][ii] = read_row(i, ii);
			
		}
	}
	
	printf("\nDebug Array:\n");
	
	for (int i = 0; i < rowAmount; i++) {
		for (int ii = 0; ii < colAmount; ii++) {
			printf("\t%d", digitArray[i][ii]);
		
		}
		
		printf("\n");
		
	}
	
	int newLineAmount, elementSpan;
	char allignChar = 'r', betweenChar;
	
	printf("Enter the number of new lines between rows: ");
	scanf("%d", &newLineAmount);
	
	int bigEnough = 0;
	
	while (!bigEnough) {
		printf("Enter the span of each array element: ");
		scanf("%d", &elementSpan);
		
		bigEnough = check_format(elementSpan);
			
	}
	
	//printf("Enter the type of justification (l for left, r for right): ");
	//allignChar = getchar();
	
	printf("Enter the character to be placed between elements: ");
	scanf(" %c", &betweenChar);
	
	printf("Enter the type of justification (l for left, r for right): ");
	scanf(" %c", &allignChar);
	
	//format_row(newLineAmount, elementSpan, allignChar, betweenChar);
	
	format_array(newLineAmount, elementSpan, allignChar, betweenChar, colAmount, rowAmount, digitArray);
	
	return 0;
	
}

int read_row (int rowNum, int colNum) {
	
	int value = 9999, isValid = 0;
	
	if (colNum == 0) { //If it is the first time the row is being read, print the prompt	
		printf("Enter row %d values (0 - 9, separated by spaces): ", rowNum);
		
		while (!isValid) {
			for (int j = 0; j < (colAmount); j++) { 	
				
				//printf("Scanning[j%d] ", j); Debug output
				
				int inputCache = 9999;
				
				scanf("%d", &inputCache);
				
				if (check_input(inputCache)) {
					storageArray[j] = inputCache;
					
					if (j == (colAmount-1)) { //If the final number has been parsed successfully, stop the loop
						isValid = 1;
					
					}
					
				} else {
					printf("***%d is not an intenger between 0 and 9***\nEnter row %d values  (0 - 9, separated by spaces): ", inputCache, rowNum);
					
					isValid = 0;
					
					//The remaining values need to be scanned in so that they don't get
					//picked up in a later scanf
					int remainingDump = 0;
					
					for (int jj = 0; jj < (colAmount - j - 1); jj++) {
						scanf("%d", &remainingDump);
						
					} 
					
					break; //Exit the for loop if an invalid value is found
					
				}
			}
		}
	}
	
	return storageArray[colNum];

}

int format_row (int newLineAmt, int elementSpan, char justification, char betweenChar, int c, int thisRow[c]) {
	//printf("An example row featuring your formatting:\n");
	
	for (int i = 0; i < newLineAmt; i++) {
		printf("\n");
	
	}
	
	for (int i = 0; i < colAmount; i++) {
		int value = thisRow[i], count = 0;
		
		while (value != 0) {
			value /= 10;
			
			count++;
		
		}
		
		if (justification == 'r') {
			for (int ii = 0; ii < (elementSpan - count); ii++) {
				printf(" ");
			
			}
			
			if (i + 1 != colAmount) {
				printf("%d%c", thisRow[i], betweenChar);
			
			} else {
				printf("%d", thisRow[i]);
			}
			
		} else {
			printf("%d", thisRow[i]);
			
			for (int ii = 0; ii < (elementSpan - count); ii++) {
				printf(" ");
			
			}
			
			if (i + 1 != colAmount) {
				printf("%c", betweenChar);
			}
		}
	}
	
	printf("\n");
	
}

int format_array (int newLineAmt, int elementSpan, char justification, char betweenChar, int colAmt, int rowAmt, int array[rowAmt][colAmt]) {
	printf("Your formatted array is:\n");
	
	int thisRow[colAmt];
	
	for (int i = 0; i < rowAmt; i++) {
		for (int ii = 0; ii < colAmt; ii++) {
			thisRow[ii] = array[i][ii];
		
		}
	
	format_row (newLineAmt, elementSpan, justification, betweenChar, colAmt, thisRow);
	
	}
	
}

int check_format (int requestedSize) {
	if (requestedSize < largestDigitCount) {
		printf("There are array elements larger than %d digits.\n", requestedSize);
		return 0;
		
	} else {
		return 1;
	
	}

}

//A function that checks if the new value is the largest in the array
int check_input (int checkInt) {
	if (checkInt > largestValue) {
		largestValue = checkInt;
	
		int count = 0;
		
		while (checkInt != 0) {
			checkInt /= 10;
			
			count++;
		
		}
		
		largestDigitCount = count;
	}
	
	return 1;
	
}
